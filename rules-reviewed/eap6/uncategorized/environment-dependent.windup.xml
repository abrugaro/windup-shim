environment-dependent-calls:
  metadata:
    description: This ruleset provides generic rules that should match when migrating
      from different server to JBoss EAP 6+.
    sourceTechnologies: []
    tags: []
    targetTechnologies:
    - id: eap
      versionRange: '[6,8)'
    - id: java-ee
      versionRange: '[6,)'
  original-file: https://github.com/windup/windup-rulesets/tree/master/rules-reviewed/eap6/uncategorized/environment-dependent.windup.xml
  rules:
    environment-dependent-calls-01000:
      perform:
        hint:
          category-id: optional
          effort: '0'
          links:
          - href: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html-single/development_guide/#class_loading_and_modules
            title: Class Loading and Modules in JBoss EAP 7
          - href: https://access.redhat.com/documentation/en-us/JBoss_Enterprise_Application_Platform/6.4/html-single/Development_Guide/index.html#chap-Class_Loading_and_Modules
            title: Class Loading and Modules in JBoss EAP 6
          - href: https://access.redhat.com/solutions/361343
            title: Article about Classloading in JBoss EAP 6
          message: The class is dynamically loaded within application. During the
            migration, multiple classes that are provided on classpath by a different
            server may not be present anymore. Please review the class-loading mechanisms
            and ensure that the dynamically loaded class is available in JBoss EAP.
          tags:
          - classloader
          title: Dynamic class instantiation
      when:
        javaclass:
          location: METHOD_CALL
          references: java.lang.Class.forName({*}
      where: {}
    environment-dependent-calls-02000:
      perform:
        iteration:
          hint:
            category-id: mandatory
            effort: '1'
            links:
            - href: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/6.4/html-single/development_guide/#chap-Remote_JNDI_Lookup
              title: JBoss EAP 6 - JNDI Reference
            - href: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/6.4/html-single/migration_guide/#sect-JNDI_Changes
              title: JNDI Changes
            message: This method lookups an object using a JNDI String. During the
              migration process, some entity JNDI bindings may change. Ensure that
              the JNDI Name does not need to change for JBoss EAP. *For Example:*
              ```java (ConnectionFactory)initialContext.lookup("weblogic.jms.ConnectionFactory");
              ``` *should become:* ```java (ConnectionFactory)initialContext.lookup("/ConnectionFactory");
              ```
            tags:
            - jndi
            title: Call of JNDI lookup
      when:
        javaclass:
          as: default
          location: METHOD_CALL
          references: javax.naming.Context.lookup{*}
      where: {}
    environment-dependent-calls-03000:
      perform:
        iteration:
          hint:
            category-id: mandatory
            effort: '1'
            links:
            - href: https://access.redhat.com/articles/1496973
              title: Migrate Applications From Other Platforms to Use Portable JNDI
                Syntax in Red Hat JBoss Enterprise Application Platform
            message: In JBoss EAP, the `InitialContext` should be instantiated with
              no arguments. Once an instance is constructed, look up the service using
              portable JNDI lookup syntax. Ensure also that in case system properties
              for `InitialContext` are provided, they do not need to be changed for
              the JBoss EAP. ```java InitialContext context = new InitialContext();
              Service service = (Service) context.lookup( "java:app/service/" + ServiceImpl.class.getSimpleName()
              ); ```
            tags:
            - jndi
            title: Proprietary InitialContext initialization
      when:
        javaclass:
          as: default
          location: CONSTRUCTOR_CALL
          references: javax.naming.InitialContext(java.util.Hashtable{*}
      where: {}
    environment-dependent-calls-03500:
      perform:
        iteration:
          classification:
            category-id: mandatory
            description: The JNDI automatically reads the application resource files
              from all components in the applications' classpaths. The JNDI then makes
              the properties from these files available to the service providers.
              Please ensure the property values listed in this file are available
              to JBoss EAP.
            effort: '1'
            issue-display-mode: all
            links: []
            tags:
            - webservice
            title: JNDI properties file
      when:
        file:
          as: default
          filename: jndi.properties
      where: {}
    environment-dependent-calls-04000:
      perform:
        iteration:
          hint:
            category-id: mandatory
            effort: '1'
            links: []
            message: After migration, some of the JMX beans provided by the previous
              server may not be present anymore. Ensure that the `javax.management.{suffix}`
              does not need to change for JBoss EAP.
            tags:
            - jmx
            title: JMX MBean object name (javax.management.{suffix})
      when:
        javaclass:
          as: default
          location: CONSTRUCTOR_CALL
          references: javax.management.{suffix}{*}
      where:
        suffix: (ObjectName)
    environment-dependent-calls-04001:
      perform:
        iteration:
          hint:
            category-id: mandatory
            effort: '1'
            links: []
            message: After migration, some of the JMX beans provided by the previous
              server may not be present anymore. Ensure that the `javax.management.{suffix}`
              does not need to change for JBoss EAP.
            tags:
            - jmx
            title: JMX API connector server address (javax.management.{suffix})
      when:
        javaclass:
          as: default
          location: CONSTRUCTOR_CALL
          references: javax.management.{suffix}{*}
      where:
        suffix: (remote.JMXServiceURL)
    environment-dependent-calls-05000:
      perform:
        iteration:
          hint:
            category-id: mandatory
            effort: '1'
            links: []
            message: After migration, JMX connection String or parameters may be different
              than the one provided by previous server. As an example, `javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_PACKAGES`
              will change. Ensure that any of the parameters does not need to change
              for JBoss EAP.
            tags:
            - jmx
            title: JMX connection factory parameters
      when:
        javaclass:
          as: default
          location: METHOD_CALL
          references: javax.management.remote.JMXConnectorFactory.connect({*})
      where: {}
