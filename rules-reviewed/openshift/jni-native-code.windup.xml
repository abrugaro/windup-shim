jni-native-code:
  metadata:
    description: This ruleset detects Java Native Interface (JNI) and Java Native
      Access (JNA) code, which may be problematic when migrating an application to
      a cloud environment.
    sourceTechnologies: []
    tags:
    - jni
    targetTechnologies:
    - id: cloud-readiness
      versionRange: null
  original-file: https://github.com/windup/windup-rulesets/tree/master/rules-reviewed/openshift/jni-native-code.windup.xml
  rules:
    jni-native-code-00000:
      perform:
        hint:
          category-id: cloud-mandatory
          effort: '7'
          links:
          - href: https://access.redhat.com/solutions/229443
            title: How to load native libraries and access them via JNI in EAP (with
              or without a module)
          - href: https://access.redhat.com/solutions/1444643
            title: Is it supported to compile the JNI code as 32-bit shared libraries
              and use it in 64-bit compiled Java code ?
          message: "Java native libraries might not run in a cloud or container environment.\n\
            \n                    Recommendations\n\n                    * Review\
            \ the purpose of the native library in your application.\n           \
            \         * Check whether the native library is compatible with a cloud\
            \ environment.\n                    * Reuse or embed the native library\
            \ or application in a cloud environment, for example, in a JBoss module.\n\
            \                    * Replace, remove, or rewrite the native library\
            \ or application using a cloud-compatible equivalent."
          tags:
          - jni
          title: Java native libraries (JNI, JNA)
      when:
        or:
        - annotation-types: []
          javaclass:
            references: java.lang.System.load({*})
          location: METHOD_CALL
        - annotation-types: []
          javaclass:
            references: java.lang.System.loadLibrary({*})
          location: METHOD_CALL
        - annotation-types: []
          javaclass:
            references: java.lang.System.mapLibraryName({*})
          location: METHOD_CALL
        - annotation-types: []
          javaclass:
            references: java.lang.Runtime.load({*})
          location: METHOD_CALL
        - annotation-types: []
          javaclass:
            references: java.lang.Runtime.loadLibrary({*})
          location: METHOD_CALL
        - annotation-types: []
          javaclass:
            references: com.sun.jna.{*}
          location: VARIABLE_DECLARATION
      where: {}
